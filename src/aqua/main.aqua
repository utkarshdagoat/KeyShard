aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"

use "deals.aqua"
use "hosts.aqua"
import "services.aqua"

-- IMPORTANT: Add exports for all functions that you want to run
-- DOCUMENTATION:
-- https://fluence.dev



-- example of running services deployed using `fluence deploy`
-- with worker 'myDeployment' which has service 'MyService' with method 'greeting'

export runRoundOne, addRoundOneMessages, initiateRoundTwo, addShares, endRoundTwo, reconstructShare

func runRoundOne(id:u16 , secret: u64) -> Round1Result:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        on subnet.workers[0].worker_id! via subnet.workers[0].host_id:
            result <- MyService.dkg_part1(id , secret)
    <- result

func addRoundOneMessages(round1_state: []u8 ,messages: [][]u8 , id:u16) -> Round1FinalState:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        on subnet.workers[0].worker_id! via subnet.workers[0].host_id:
           result <-  MyService.combine_round1_msgs(round1_state, messages, id)
    <- result        

func initiateRoundTwo(round1_state: []u8) -> Round2Result:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        on subnet.workers[0].worker_id! via subnet.workers[0].host_id:
            result <- MyService.intiate_round2(round1_state)
    <- result

func addShares(round2_state: []u8, shares: [][]u8 , id: u16) -> Round2FinalState:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        on subnet.workers[0].worker_id! via subnet.workers[0].host_id:
            result <- MyService.add_shares(round2_state, shares , id)
    <- result

func endRoundTwo(round2_state: []u8) -> EndRound2Result:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        on subnet.workers[0].worker_id! via subnet.workers[0].host_id:
            result <- MyService.end_round2(round2_state)
    <- result

func reconstructShare(final_shares: [][]u8) -> FinalResult:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
        on subnet.workers[0].worker_id! via subnet.workers[0].host_id:
            result <- MyService.reconstruct_share(final_shares)
    <- result